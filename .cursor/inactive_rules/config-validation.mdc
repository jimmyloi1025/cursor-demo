---
globs: *.py,*.yaml,*.yml
description: Configuration management and validation patterns
---

# Configuration Validation

Reference [config.example.yaml](mdc:config.example.yaml) for the expected configuration structure.

## Configuration Schema

Required sections and their validation rules:

### Monitor Section
```yaml
monitor:
  interval_seconds: 5                    # int > 0
  suspicious_ports: [22, 23, 445]       # list of int 1-65535
  connection_rate_threshold_per_ip: 30   # int > 0
  alert_cooldown_seconds: 60             # int >= 0
  allowlist_ips: ["127.0.0.1/32"]       # list of valid CIDR
```

### SIEM Section
```yaml
siem:
  enabled: false                         # bool
  url: "https://siem.example.com"        # valid URL if enabled
  auth:
    type: "oauth2"                       # "oauth2" | "mtls" | "none"
    token: "${SIEM_TOKEN}"               # string if oauth2
  verify_ssl: true                       # bool
```

## Validation Implementation

```python
def validate_config(config: Dict[str, Any]) -> None:
    """Validate configuration with specific error messages."""
    
    # Validate monitor section
    monitor = config.get("monitor", {})
    interval = monitor.get("interval_seconds", 0)
    if not isinstance(interval, int) or interval <= 0:
        raise ValueError("monitor.interval_seconds must be positive integer")
    
    # Validate suspicious ports
    ports = monitor.get("suspicious_ports", [])
    for port in ports:
        if not isinstance(port, int) or not (1 <= port <= 65535):
            raise ValueError(f"Invalid port number: {port}")
    
    # Validate CIDR ranges
    allowlist = monitor.get("allowlist_ips", [])
    for cidr in allowlist:
        try:
            ip_network(cidr, strict=False)
        except ValueError as e:
            raise ValueError(f"Invalid CIDR range '{cidr}': {e}")
```

## Environment Variable Support

Use this pattern for sensitive values:

```python
def resolve_env_vars(config_str: str) -> str:
    """Replace ${VAR_NAME} with environment variables."""
    import os
    import re
    
    def replacer(match):
        var_name = match.group(1)
        value = os.getenv(var_name)
        if value is None:
            raise ValueError(f"Environment variable {var_name} not set")
        return value
    
    return re.sub(r'\$\{([^}]+)\}', replacer, config_str)
```

## Default Values

Always provide secure defaults:

```python
SECURE_DEFAULTS = {
    "monitor": {
        "interval_seconds": 5,
        "alert_cooldown_seconds": 60,
        "allowlist_ips": ["127.0.0.1/32", "::1/128"]
    },
    "siem": {
        "enabled": False,
        "verify_ssl": True,
        "timeout_seconds": 5
    },
    "logging": {
        "level": "INFO"
    }
}
```