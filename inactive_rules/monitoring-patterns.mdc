---
description: Network monitoring implementation patterns
globs: *.py
---

# Network Monitoring Patterns

Reference [supportive_documents/alert-flow.md](mdc:supportive_documents/alert-flow.md) for the alert processing workflow.

## Connection Event Structure

Use this dataclass for all connection events:

```python
@dataclass
class ConnectionEvent:
    timestamp_utc: str
    local_ip: str
    local_port: int
    remote_ip: str
    remote_port: int
    pid: Optional[int]
    process_name: Optional[str]
    status: str
    protocol: str
```

## Monitoring Loop Pattern

```python
async def scan_connections(self) -> None:
    """Main monitoring loop using psutil."""
    conns = psutil.net_connections(kind="inet")
    
    for conn in conns:
        if not conn.raddr:  # Skip connections without remote endpoint
            continue
            
        event = self._create_event_from_connection(conn)
        alert = self._analyze_for_suspicious_activity(event)
        
        if alert:
            await self._handle_alert(alert)
```

## Suspicious Activity Detection

Implement these detection rules:

1. **Suspicious Ports**: Monitor connections to ports [22, 23, 445, 3389, 6667, 9001, 9050]
2. **Connection Rate**: Track connections per IP per minute (threshold: 30)
3. **Port Scanning**: Monitor unique destination ports per process (threshold: 50)
4. **External Connections**: Alert on non-private IP destinations

## Alert Generation Pattern

```python
def create_alert(self, event: ConnectionEvent, reasons: List[str], risk_score: int) -> Alert:
    severity = "high" if risk_score >= 70 else "medium" if risk_score >= 40 else "low"
    
    return Alert(
        id=f"nm-{int(time.time())}-{hash(event.remote_ip) & 0xFFFF:X}",
        created_at_utc=datetime.now(timezone.utc).isoformat(),
        severity=severity,
        reason="; ".join(reasons),
        risk_score=risk_score,
        event=event,
        enrichment=self._enrich_event(event)
    )
```

## SIEM Integration

Follow the HTTPS JSON pattern from [supportive_documents/siem-requirements.md](mdc:supportive_documents/siem-requirements.md):

```python
async def send_to_siem(self, alert: Alert) -> None:
    headers = {"Content-Type": "application/json"}
    
    if self.auth_type == "oauth2":
        headers["Authorization"] = f"Bearer {self.token}"
    
    payload = asdict(alert)
    
    await self._http_post(self.siem_url, headers=headers, json=payload)
```

## State Management

Use efficient data structures for tracking:

```python
# Track seen connections to avoid duplicates
self._seen_connections: Set[Tuple[str, int, str, int, Optional[int]]] = set()

# Track connection rates per IP
self._events_by_ip: Dict[str, Deque[float]] = defaultdict(deque)

# Track ports accessed by each process
self._ports_by_process: Dict[int, Set[int]] = defaultdict(set)
```