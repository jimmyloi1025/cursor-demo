---
alwaysApply: true
---

# Project Structure Guide

This is a cybersecurity monitoring project with network connection analysis and SIEM integration capabilities.

## Core Files

The main entry point is [network_monitor.py](mdc:network_monitor.py), which implements the monitoring loop and alert generation.

Configuration is loaded from [config.yaml](mdc:config.yaml) (or [config.example.yaml](mdc:config.example.yaml) as a template).

Dependencies are specified in [requirements.txt](mdc:requirements.txt).

## Supportive Documents

Project requirements and integration specifications are in the [supportive_documents/](mdc:supportive_documents/) directory:
- [siem-requirements.md](mdc:supportive_documents/siem-requirements.md) - SIEM integration protocols
- [alert-flow.md](mdc:supportive_documents/alert-flow.md) - Alert processing workflow  
- [network-topology.md](mdc:supportive_documents/network-topology.md) - System architecture

## Expected Project Structure

```
cursor-demo/
├── network_monitor.py          # Main monitoring script
├── config.yaml                 # Runtime configuration
├── config.example.yaml         # Configuration template
├── requirements.txt            # Python dependencies
├── logs/                       # Log files directory
├── supportive_documents/       # Project documentation
│   ├── siem-requirements.md
│   ├── alert-flow.md
│   └── network-topology.md
└── .cursor/
    └── rules/                  # Cursor rules directory
```

## Development Workflow

1. Reference supportive documents for requirements
2. Use secure coding patterns with type hints
3. Follow the alert flow: Detection → Validation → Enrichment → Notification
4. Test with example configuration before production deployment